# -*- coding: utf-8 -*-
"""assignment2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c-E21sV6U_Uu7wmCqEl2cxyJbAyne2H6
"""

# this code was reviewed and corrected by AI (Gemini and ChatGPT)
#i am trying to get this to github but its not working.

import numpy as np
import pandas as pd
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load data
df = pd.read_csv('https://raw.githubusercontent.com/dustywhite7/Econ8310/master/AssignmentData/assignment3.csv')

# Define features and target
X = df[['Total']]
y = df['meal']

# Optional: convert target to binary if it's not numeric
if y.dtype == 'object':
    y = (y == y.unique()[0]).astype(int)  # Example: first category = 1, others = 0

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42, stratify=y)

# Define model
model = XGBClassifier(
    n_estimators=100,
    max_depth=5,
    learning_rate=0.5,
    objective='binary:logistic',
    random_state=42
)

# Fit the model on training data
modelFit = model.fit(X_train, y_train)

# Predict on test data
pred = model.predict(X_test)

# Evaluate accuracy
print(f"XGBoost Accuracy: {accuracy_score(y_test, pred) * 100:.2f}%")
print("\nConfusion Matrix:\n", confusion_matrix(y_test, pred))
print("\nClassification Report:\n", classification_report(y_test, pred))

# import numpy as np
# import pandas as pd
# from xgboost import XGBClassifier
# from sklearn.model_selection import train_test_split
# from sklearn.metrics import accuracy_score

# df = pd.read_csv('https://raw.githubusercontent.com/dustywhite7/Econ8310/master/AssignmentData/assignment3.csv')

# y = df['meal']
# x = df[['Total']]
# x,xt,y,yt = train_test_split(x,y,test_size=0.2)
# model = XGBClassifier(n_estimators=100,max_depth=5,learning_rate=0.5,objective='binary:logistic')
# modelFit = model.fit(x,y)
# pred = model.predict(xt)
# print("XGBoost Accuracy {}%.".format(accuracy_score(yt,pred)*100))
